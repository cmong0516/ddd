package com.example.ddd.order.domain;

public class BoundedContext {

    // 9.1 도메인 모델과 경계

    // 도메인 모델을 만들때 빠지기 쉬운 함정이 도메인을 완벽하게 표현하는 단일 모델을 만드는 시도를 하는것이다.
    // 한 도메인은 여러 하위 도메인으로 구분되기 때문에 한개의 모델로 여러 하위 도메인을 모두 표현하려고 하면 오히려 모든 하위 도메인에 맞지 않는다.

    // 상품 이라는 모델을 예로 들면 카탈로그에서의 상품, 재고관리 에서의 상품 , 주문에서의 상품 , 배송에서의 상품
    // 모두 상품 이라는 이름을 사용하지만 실제로 의미하는 것은 다르다.
    // EX) 회원 도메인에서는 회원이라고 하지만 주문 도메인에서는 주문라 라고 부르고 배송 도메인에서는 발송자

    // 이렇게 하위 도메인마다 의미가 다르기 때문에 올바른 도메인 모델을 개발하려면 하위 도메인마다 모델을 만들어야 한다.
    // 모델은 특정한 컨텍스트(문맥) 하에서 완전한 의미를 갖는다.
    // 이렇게 구분되는 경계를 DDD 에서는 바운디드 컨텍스트 라고 한다.


    // 9.2 바운디드 컨텍스트

    // 바운디드 컨텍스트는 모델의경게를 결정하며 한개의 반운디드 컨텍스트는 논리적으로 한개의 모델을 갖는다.
    // 이상적으로 하위 도메인과 바운디드 컨텍스트가 일대일 관계를 가지면 좋겠지만 현실은 그렇지 않을때가 많다.
    // 바운디드 컨텍스트는 팀 조직에 따라 달라지기도 한다.

    // 여러 하위 도메인을 하나의 바운디드 컨텍스트 에서 개발할때 주의할 점은 하위 도메인의 모델이 섞이지 않도록 하는것.
    // 도메인 모델이 개별 하위 도메인을 제대로 반영하지 못하면 하위 도메인별로 기능 확장이 어렵게 된다.
    // 한개의 바운디드 컨텍스트가 여러 하위 도메인을 포함하더라도 하위 도메인마다 구분되는 패키지를 갖도록 구현해야 하며 이렇게 함으로써 도메인마다 바운디드 컨텍스트를 갖는 효과를 낼수있다.

    // 바운디드 컨텍스트는 구현하는 하위 도메인에 알맞은 모델을 포함한다.
    // 같은 사용자라 하더라도 주문 바운디드 컨텍스트와 회원 바운디드 컨텍스트가 갖는 모델이 달라진다.
    // 같은 상품이라도 카탈로그 바운디드 컨텍스트의 Product 와 재고 바운디드 컨텍스트의 Product 는 각 켄텍스트에 맞는 모델을 갖는다.

    // 회원의 Member 는 애그리거트의 루트 이지만 주문의 Orderer 는 밸류가 되고 카탈로그의 Product 는 상품이 속할 Cetegory 와 연관을 갖지만 재고의 Product는 카탈로그의 Category 와 관계가 없다.


    // 9.3 바운디드 컨텍스트 구현
    // 바운디드 컨텍스트는 도메인 기능을 사용자에게 제공하는데 필요한 표현영역, 응용서비스 ,인프라스트럭처 영역을 모두 포함한다.
    // 도메인 모델의 데이터 구조가 바뀌면 DB 테이블 스키마도 함께 변경해야 하므로 테이블도 바운디드컨텍스트에 포함된다.
    // 모든 바운디드 컨텍스트를 반드시 도메인 주도로 개발할 필욯는 없다.
    // 상품 리뷰는 복잡한 도메인 로직을 갖지 않기때문에 CRUD 방식으로 구현해도 된다.

    // 서비스 - DAO 구조를 사용하면 도메인 기능이 서비스에 흩어지게 되지만 도메인 기능 자체가 단순하면 문제없다.
    // 한 바운디드 컨텍스트에서 두 방식을 혼합해서 사용할수도 있다.
        // 대표적인 예 CQRS 패턴.
    // 각 바운디드 컨텍스트는 서로 다른 기술을 사용할수도 있다.
        // 웹 MVC 는 스프링 MVC 를 사용하고 리포지터리 구현기술로는 JPA, Netty 를 사용해서 REST API 등등
        // 어떤 바운디드 컨텍스트는 RDBMS 대신 NoSQL 을 사용할수도 있다.
    // 바운디드 컨텍스트가 반드시 사용자에게 보여지는 UI 를 가져야 하는것은 아니다.


    // 9.4 바운디드 컨텍스트간 통합

    // 온라인 쇼핑 사이트에서 매출 증대를 위해 카탈라고 하위 도메인에 개인화 추천 기능을 도입한다고 하면 기존 카탈로그 시스템을 개발하던 팀과 별도로 추천 시스템을 담당하는 팀이 새로 생겨 함께 개발한다.
    // 이렇게 되면 카탈라고 하위 도메인에는 기존 카탈로그를 위한 바운디드 컨텍스트와 추천 기능을 위한 바운디드 컨텍스트가 생긴다.
        // 두 팀이 관련된 바운디드 컨텍스트를 개발하면 자연스럽게 두 바운디드 컨텍스트간 통합이 발생한다.

    // 사용자가 제품 상세 페이지를 볼때 보고있는 상품과 유사한 상품 목록을 하단에 보여준다.
        // 사용자가 카탈로그 바운디드 컨텍스트에 추천 제품 목록을 요청하면 카탈로그 바운디드 컨텍스트는 추천 바운디드 컨텍스트로부터 정보를 읽어와 추천 목록을 제공
        // 이때 카탈로그 컨텍스트와 추천 컨텍스트의 도메인 모델은 서로 다르다.
        // 추천 시스템은 상품 상세 정보를 포함하지 않으며 상품 번호 대신 아이템 ID 라는 용어를 사용해서 식별자를 표현하고 추천 순위와 같은 데이터를 담는다.
        // 카탈로그 시스템은 추천 시스템으로부터 데이터를 받아오지만 카탈로그 시스템에서는 추천의 도메인 모델을 사용하기보다는 카탈로그 도메인 모델을 사용해서 추천 상품을 표현해야한다.


}
